version: '3.7'

services:

  multiplexer:
    image: object_cut_multiplexer
    build: multiplexer
    expose:
      - 80
    volumes:
      - '/tmp:/tmp'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './keys:/srv/engine/keys'
    networks:
      - object_cut
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=object_cut'
      - 'traefik.http.routers.multiplexer.entrypoints=http'
      - 'traefik.http.routers.multiplexer.rule=Host(`api.objectcut.com`)'
      - 'traefik.http.routers.multiplexer-secure.tls=true'
      - 'traefik.http.routers.multiplexer-secure.entrypoints=https'
      - 'traefik.http.routers.multiplexer-secure.rule=Host(`api.objectcut.com`)'
      - 'traefik.http.routers.multiplexer-secure.tls.certresolver=lets-encr'
      - 'traefik.http.services.multiplexer.loadbalancer.server.port=80'
      - 'traefik.http.services.multiplexer.loadbalancer.healthcheck.path=/stillalive'
      - 'traefik.http.services.multiplexer.loadbalancer.healthcheck.interval=30s'
      - 'traefik.http.services.multiplexer.loadbalancer.healthcheck.timeout=10s'
      - 'traefik.http.services.multiplexer.loadbalancer.healthcheck.hostname=api.objectcut.com'

  inference:
    image: object_cut_inference
    build: inference
    expose:
      - 80
    volumes:
      - '/tmp:/tmp'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - object_cut
    restart: always
    environment:
      - MODEL=BASNet  # Can also be `U2NET`
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=object_cut'
      - 'traefik.http.routers.inference.entrypoints=http'
      - 'traefik.http.routers.inference.rule=Host(`inference`)'
      - 'traefik.http.services.inference.loadbalancer.server.port=80'
      - 'traefik.http.services.inference.loadbalancer.healthcheck.path=/stillalive'
      - 'traefik.http.services.inference.loadbalancer.healthcheck.interval=30s'
      - 'traefik.http.services.inference.loadbalancer.healthcheck.timeout=10s'
      - 'traefik.http.services.inference.loadbalancer.healthcheck.hostname=inference'

  traefik:
    container_name: object_cut_router
    image: traefik:v2.1
    ports:
      - 80:80
      - 443:443
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './traefik/traefik.yml:/traefik.yml:ro'
      - './traefik/acme.json:/acme.json'
    networks:
      - object_cut
    restart: always
    labels:
      - 'traefik.enable=false'
  
networks:
  object_cut:
    name: object_cut
    driver: bridge
